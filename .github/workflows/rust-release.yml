name: Rust Release

on:
  push:
    tags:
      - 'v*.*.*'
      - 'rust-v*.*.*'
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag'
        required: true
        type: string

defaults:
  run:
    working-directory: chainweb-mining-client-rust

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_id: ${{ steps.create_release.outputs.id }}
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.get_version.outputs.VERSION }}
          release_name: Chainweb Mining Client ${{ steps.get_version.outputs.VERSION }}
          draft: false
          prerelease: ${{ contains(steps.get_version.outputs.VERSION, 'alpha') || contains(steps.get_version.outputs.VERSION, 'beta') || contains(steps.get_version.outputs.VERSION, 'rc') }}
          body: |
            ## Chainweb Mining Client - Rust Implementation
            
            ### Changes
            See [CHANGELOG.md](https://github.com/kadena-io/chainweb-mining-client/blob/master/CHANGELOG.md) for details.
            
            ### Installation
            
            **Download and run directly:**
            ```bash
            # Linux
            wget https://github.com/kadena-io/chainweb-mining-client/releases/download/${{ steps.get_version.outputs.VERSION }}/chainweb-mining-client-linux-x86_64
            chmod +x chainweb-mining-client-linux-x86_64
            ./chainweb-mining-client-linux-x86_64 --help
            
            # macOS
            wget https://github.com/kadena-io/chainweb-mining-client/releases/download/${{ steps.get_version.outputs.VERSION }}/chainweb-mining-client-macos-x86_64
            chmod +x chainweb-mining-client-macos-x86_64
            ./chainweb-mining-client-macos-x86_64 --help
            ```
            
            **Using Docker:**
            ```bash
            docker run salamaashoush/chainweb-mining-client:${{ steps.get_version.outputs.VERSION }} --help
            ```
            
            ### Verification
            All binaries are built and signed in GitHub Actions. You can verify the checksums using the provided SHA256SUMS file.

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: linux-x86_64
          - os: ubuntu-latest
            target: aarch64-unknown-linux-gnu
            name: linux-aarch64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: windows-x86_64
          - os: macos-latest
            target: x86_64-apple-darwin
            name: macos-x86_64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: macos-aarch64

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Install stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross-compilation tools (Linux)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu

      - name: Cache cargo registry
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-${{ matrix.target }}-release-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.target }}-release-cargo-

      - name: Configure cross-compilation (Linux aarch64)
        if: matrix.target == 'aarch64-unknown-linux-gnu'
        run: |
          echo '[target.aarch64-unknown-linux-gnu]' >> ~/.cargo/config.toml
          echo 'linker = "aarch64-linux-gnu-gcc"' >> ~/.cargo/config.toml

      - name: Build release
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare release asset
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            BINARY_NAME="chainweb-mining-client.exe"
            ASSET_NAME="chainweb-mining-client-${{ matrix.name }}.exe"
          else
            BINARY_NAME="chainweb-mining-client"
            ASSET_NAME="chainweb-mining-client-${{ matrix.name }}"
          fi
          
          cp "target/${{ matrix.target }}/release/$BINARY_NAME" "$ASSET_NAME"
          
          # Create checksum
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certUtil -hashfile "$ASSET_NAME" SHA256 | head -2 | tail -1 > "$ASSET_NAME.sha256"
          else
            shasum -a 256 "$ASSET_NAME" > "$ASSET_NAME.sha256"
          fi
          
          echo "ASSET_PATH=$ASSET_NAME" >> $GITHUB_ENV
          echo "CHECKSUM_PATH=$ASSET_NAME.sha256" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.ASSET_PATH }}
          asset_name: ${{ env.ASSET_PATH }}
          asset_content_type: application/octet-stream

      - name: Upload Checksum
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./${{ env.CHECKSUM_PATH }}
          asset_name: ${{ env.CHECKSUM_PATH }}
          asset_content_type: text/plain

  docker-release:
    name: Docker Release
    needs: create-release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout sources
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            echo "VERSION=${{ github.event.inputs.tag }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image (scratch)
        uses: docker/build-push-action@v5
        with:
          context: ./chainweb-mining-client-rust
          file: ./chainweb-mining-client-rust/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            salamaashoush/chainweb-mining-client:${{ steps.get_version.outputs.VERSION }}
            salamaashoush/chainweb-mining-client:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and push Docker image (distroless)
        uses: docker/build-push-action@v5
        with:
          context: ./chainweb-mining-client-rust
          file: ./chainweb-mining-client-rust/Dockerfile.distroless
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            salamaashoush/chainweb-mining-client:${{ steps.get_version.outputs.VERSION }}-distroless
            salamaashoush/chainweb-mining-client:latest-distroless
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-checksums:
    name: Create Checksums File
    needs: [create-release, build-release]
    runs-on: ubuntu-latest
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Create SHA256SUMS file
        run: |
          find . -name "*.sha256" -exec cat {} \; > SHA256SUMS
          
      - name: Upload SHA256SUMS
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create-release.outputs.upload_url }}
          asset_path: ./SHA256SUMS
          asset_name: SHA256SUMS
          asset_content_type: text/plain