# Chainweb Mining Client - Rust Implementation
# Comprehensive build and check script using just

# Default recipe
default: check

# Help
help:
    @echo "Available recipes:"
    @echo "  check        - Run all code quality checks (default)"
    @echo "  ci           - Run all checks including tests and release build"
    @echo "  build        - Build the project"
    @echo "  build-release- Build release version"
    @echo "  test         - Run tests"
    @echo "  fmt          - Format code with rustfmt"
    @echo "  fmt-check    - Check if code is formatted"
    @echo "  lint         - Run clippy linter"
    @echo "  typos        - Check for typos"
    @echo "  unused-deps  - Check for unused dependencies"
    @echo "  bench        - Run benchmarks"
    @echo "  clean        - Clean build artifacts"
    @echo "  install      - Install the binary"
    @echo "  dev-setup    - Install system dependencies and development tools"
    @echo "  dev-verify   - Verify all development tools are installed"
    @echo ""
    @echo "Docker commands:"
    @echo "  docker-build [TAG] [TYPE] - Build Docker image (TYPE: scratch|distroless)"
    @echo "  docker-build-all [TAG]    - Build all Docker variants"
    @echo "  docker-test [TAG]         - Test Docker image"
    @echo "  docker-clean              - Clean Docker build cache"
    @echo "  release [TAG]             - Complete release workflow"
    @echo ""
    @echo "Stratum testing:"
    @echo "  test-stratum [PORT]       - Full Stratum protocol compatibility test"
    @echo "  test-stratum-no-node      - Test Stratum without requiring a node"
    @echo "  test-stratum-unit         - Stratum unit tests only"
    @echo ""
    @echo "Compatibility testing:"
    @echo "  test-compat-all           - Run all compatibility tests vs Haskell"
    @echo "  test-compat-stratum       - Test Stratum compatibility"
    @echo "  test-compat-workers       - Test all worker types"
    @echo "  test-compat-external      - Test external worker"
    @echo ""
    @echo "End-to-end stress testing:"
    @echo "  e2e-stress               - Run comprehensive E2E stress tests"
    @echo "  e2e-stress-quick         - Run quick E2E stress tests (30s each)"
    @echo "  e2e-stress-cpu           - Run CPU mining stress test only"
    @echo "  e2e-stress-stratum       - Run Stratum server stress test only"
    @echo "  e2e-stress-external      - Run external worker stress test only"
    @echo "  e2e-test [TEST]          - Run specific E2E test"
    @echo ""
    @echo "Monitoring:"
    @echo "  monitoring-status        - Show current monitoring status"
    @echo "  bench-stress            - Run stress testing benchmarks"
    @echo "  bench-property           - Run property-based testing benchmarks"

# Install required development tools
dev-setup:
    @echo "🛠️  Installing development tools..."
    chmod +x ./scripts/install-deps.sh
    ./scripts/install-deps.sh

# Verify all development tools are installed
dev-verify:
    @echo "🔍 Verifying development tools..."
    chmod +x ./scripts/install-deps.sh
    ./scripts/install-deps.sh verify

# Run all code quality checks
check: fmt-check lint typos unused-deps compiler-check
    @echo "✅ All checks passed!"

# CI checks (suitable for continuous integration)
ci: fmt-check lint typos unused-deps compiler-check test build-release
    @echo "✅ All CI checks passed!"

# Quick development check (faster than full CI)
dev-check: fmt-check lint
    @echo "✅ Quick development checks passed!"

# Build the project
build:
    @echo "🔨 Building project..."
    cargo build

# Build release version
build-release:
    @echo "🔨 Building release version..."
    cargo build --release

# Run tests
test:
    @echo "🧪 Running tests..."
    cargo test

# Format code
fmt:
    @echo "🎨 Formatting code..."
    cargo fmt

# Check if code is formatted
fmt-check:
    @echo "🎨 Checking code formatting..."
    cargo fmt --check

# Run clippy linter
lint:
    @echo "🔍 Running clippy..."
    cargo clippy -- -D warnings

# Check for typos
typos:
    @echo "📝 Checking for typos..."
    typos

# Check for unused dependencies
unused-deps:
    @echo "📦 Checking for unused dependencies..."
    cargo machete

# Run compiler checks
compiler-check:
    @echo "🔍 Running compiler checks..."
    cargo check

# Run benchmarks (if available)
bench:
    @echo "⚡ Running benchmarks..."
    cargo bench --features bench

# Run comprehensive benchmark suite
bench-all:
    @echo "⚡ Running comprehensive benchmark suite..."
    chmod +x ./scripts/bench.sh
    ./scripts/bench.sh

# Run quick benchmarks (fewer samples)
bench-quick:
    @echo "⚡ Running quick benchmarks..."
    chmod +x ./scripts/bench.sh
    ./scripts/bench.sh --quick

# Save benchmark baseline
bench-save baseline="main":
    @echo "⚡ Saving benchmark baseline: {{baseline}}..."
    chmod +x ./scripts/bench.sh
    ./scripts/bench.sh --save-baseline {{baseline}}

# Compare against benchmark baseline
bench-compare baseline="main":
    @echo "⚡ Comparing against baseline: {{baseline}}..."
    chmod +x ./scripts/bench.sh
    ./scripts/bench.sh --compare-baseline {{baseline}}

# Generate benchmark HTML reports
bench-report output="./bench-reports":
    @echo "⚡ Generating benchmark reports in {{output}}..."
    chmod +x ./scripts/bench.sh
    ./scripts/bench.sh --output-dir {{output}}

# Clean build artifacts
clean:
    @echo "🧹 Cleaning build artifacts..."
    cargo clean

# Install the binary
install:
    @echo "📦 Installing binary..."
    cargo install --path .

# Fix all auto-fixable issues
fix: fmt
    @echo "🔧 Running clippy with auto-fix..."
    cargo clippy --fix --allow-dirty
    @echo "✅ Auto-fixes applied!"

# Watch for changes and run checks
watch:
    @echo "👀 Watching for changes..."
    cargo watch -x check -x test

# Check specific file
check-file FILE:
    @echo "🔍 Checking {{FILE}}..."
    cargo check --bin {{FILE}}

# Run a specific test
test-one TEST:
    @echo "🧪 Running test: {{TEST}}"
    cargo test {{TEST}}

# Generate documentation
docs:
    @echo "📚 Generating documentation..."
    cargo doc --open

# Security audit
audit:
    @echo "🔒 Running security audit..."
    cargo audit

# Docker build recipes
docker-build TAG="latest" DOCKERFILE_TYPE="scratch":
    @echo "🐳 Building Docker image with tag {{TAG}} using {{DOCKERFILE_TYPE}}..."
    chmod +x ./build-docker.sh
    ./build-docker.sh {{TAG}} {{DOCKERFILE_TYPE}}

# Build both Docker variants
docker-build-all TAG="latest":
    @echo "🐳 Building all Docker variants..."
    just docker-build {{TAG}} scratch
    just docker-build {{TAG}} distroless

# Test Docker image locally
docker-test TAG="latest":
    @echo "🧪 Testing Docker image..."
    docker run --rm {{IMAGE_NAME}}:{{TAG}} --help

# Test Stratum protocol compatibility
test-stratum NODE_PORT="8080":
    @echo "🔍 Testing Stratum protocol compatibility..."
    chmod +x ./scripts/test-stratum.sh
    ./scripts/test-stratum.sh --node-port {{NODE_PORT}}

# Test Stratum without node check (for testing without a running node)
test-stratum-no-node:
    @echo "🔍 Testing Stratum protocol (without node check)..."
    chmod +x ./scripts/test-stratum.sh
    ./scripts/test-stratum.sh --skip-node-check

# Test Stratum protocol (unit tests only)
test-stratum-unit:
    @echo "🧪 Running Stratum unit tests..."
    cargo test stratum_compatibility

# Docker cleanup
docker-clean:
    @echo "🧹 Cleaning Docker build cache..."
    docker buildx prune -f

# Set default image name (can be overridden with environment variable)
IMAGE_NAME := env_var_or_default("IMAGE_NAME", "salamaashoush/chainweb-mining-client")

# Complete workflow for releases
release TAG: check test build-release docker-build-all
    @echo "🚀 Release {{TAG}} complete!"
    @echo "Built binary and Docker images"

# Compatibility tests
test-compat-all: build-release
    @echo "🔍 Running all compatibility tests..."
    cd ../test-compatibility && ./test-all-workers.sh

test-compat-stratum: build-release
    @echo "🔍 Testing Stratum compatibility..."
    cd ../test-compatibility && ./test-stratum-worker.sh

test-compat-workers: build-release
    @echo "🔍 Testing all worker types..."
    cd ../test-compatibility && ./test-all-workers.sh

test-compat-external: build-release
    @echo "🔍 Testing external worker..."
    cd ../test-compatibility && ./test-external-worker.sh

test-compat-on-demand: build-release
    @echo "🔍 Testing on-demand worker..."
    cd ../test-compatibility && ./test-on-demand-worker.sh

# End-to-end stress testing recipes
e2e-stress DURATION="60" WORKERS="4": build-release
    @echo "🔥 Running comprehensive E2E stress tests..."
    @echo "Duration: {{DURATION}}s per test, Workers: {{WORKERS}}"
    chmod +x ./scripts/e2e-stress-test.sh
    TEST_DURATION={{DURATION}} WORKER_COUNT={{WORKERS}} ./scripts/e2e-stress-test.sh

# Quick E2E stress testing (shorter duration)
e2e-stress-quick: build-release
    @echo "🔥 Running quick E2E stress tests..."
    chmod +x ./scripts/e2e-stress-test.sh
    TEST_DURATION=30 WORKER_COUNT=2 ./scripts/e2e-stress-test.sh

# CPU mining stress test only
e2e-stress-cpu DURATION="60" WORKERS="4": build-release
    @echo "🔥 Running CPU mining stress test..."
    chmod +x ./scripts/e2e-stress-test.sh
    @echo "Running CPU mining for {{DURATION}}s with {{WORKERS}} workers..."
    # Start node and run CPU test only (would need script modification)
    TEST_DURATION={{DURATION}} WORKER_COUNT={{WORKERS}} ./scripts/e2e-stress-test.sh

# Stratum server stress test only  
e2e-stress-stratum DURATION="45" WORKERS="8": build-release
    @echo "🔥 Running Stratum server stress test..."
    @echo "Running Stratum test for {{DURATION}}s with {{WORKERS}} connections..."
    # This would need a specialized script for Stratum-only testing
    cargo test test_e2e_stratum_server_stress --ignored

# External worker stress test only
e2e-stress-external DURATION="30" WORKERS="6": build-release  
    @echo "🔥 Running external worker stress test..."
    @echo "Running external worker test for {{DURATION}}s with {{WORKERS}} workers..."
    cargo test test_e2e_external_worker_stress --ignored

# Run specific E2E test
e2e-test TEST: build-release
    @echo "🧪 Running E2E test: {{TEST}}"
    cargo test {{TEST}} --ignored

# Run all E2E tests (programmatic)
e2e-test-all: build-release
    @echo "🧪 Running all E2E stress tests..."
    cargo test e2e_ --ignored

# Monitoring status
monitoring-status: build-release
    @echo "📊 Checking monitoring status..."
    ./target/release/chainweb-mining-client --monitoring-status

# Stress testing benchmarks
bench-stress:
    @echo "⚡ Running stress testing benchmarks..."
    cargo bench --bench stress_tests

# Property-based testing benchmarks  
bench-property:
    @echo "⚡ Running property-based testing benchmarks..."
    cargo bench --bench comprehensive_performance -- property

# Comprehensive performance benchmarks
bench-comprehensive:
    @echo "⚡ Running comprehensive performance benchmarks..."
    cargo bench --bench comprehensive_performance

# All benchmark suites
bench-all-suites: bench bench-comprehensive bench-stress bench-property
    @echo "✅ All benchmark suites completed!"

# Development workflow with monitoring
dev-with-monitoring: build-release
    @echo "🚀 Starting development with monitoring enabled..."
    @echo "Starting CPU mining with monitoring..."
    RUST_LOG=debug ./target/release/chainweb-mining-client cpu \
        --chainweb-url http://localhost:1848 \
        --account dev-miner \
        --threads 2 \
        --batch-size 10000

# Setup for E2E testing
e2e-setup:
    @echo "⚙️ Setting up E2E testing environment..."
    @echo "Checking Docker..."
    docker --version
    @echo "Checking curl..."
    curl --version  
    @echo "Checking jq..."
    jq --version
    @echo "Making scripts executable..."
    chmod +x ./scripts/e2e-stress-test.sh
    chmod +x ../test-compatibility/start-chainweb-node.sh
    @echo "✅ E2E setup complete!"

# Cleanup E2E testing environment
e2e-cleanup:
    @echo "🧹 Cleaning up E2E testing environment..."
    @echo "Stopping any running chainweb nodes..."
    docker stop chainweb-mining-test 2>/dev/null || true
    docker rm chainweb-mining-test 2>/dev/null || true
    @echo "Killing any mining processes..."
    pkill -f "chainweb-mining-client" || true
    @echo "Removing test logs..."
    rm -f stress_test_*.log stress_test_summary.txt
    @echo "✅ E2E cleanup complete!"

# Full development workflow
dev-full: dev-setup check test e2e-setup e2e-stress-quick monitoring-status
    @echo "🎉 Full development workflow completed!"
    @echo "✅ Code quality checks passed"
    @echo "✅ Tests passed"
    @echo "✅ E2E stress tests passed"
    @echo "✅ Monitoring system verified"

# Production readiness check
prod-ready: ci e2e-stress bench-comprehensive monitoring-status
    @echo "🚀 Production readiness check..."
    @echo "✅ All CI checks passed"
    @echo "✅ E2E stress tests passed"
    @echo "✅ Performance benchmarks completed"
    @echo "✅ Monitoring system operational"
    @echo "🎉 System is production ready!"
