# Multi-stage build for minimal image size with distroless
# Build stage with Rust toolchain
FROM --platform=$BUILDPLATFORM rust:alpine AS builder

# Install build dependencies
RUN apk add --no-cache \
    musl-dev \
    openssl-dev \
    openssl-libs-static \
    pkgconfig \
    ca-certificates

# Set up cross-compilation
ARG TARGETPLATFORM
RUN case "$TARGETPLATFORM" in \
    "linux/amd64") echo "x86_64-unknown-linux-musl" > /target.txt ;; \
    "linux/arm64") echo "aarch64-unknown-linux-musl" > /target.txt ;; \
    *) echo "Unsupported platform: $TARGETPLATFORM" && exit 1 ;; \
    esac

# Install nightly toolchain and the target
RUN rustup toolchain install nightly && \
    rustup default nightly && \
    rustup target add --toolchain nightly $(cat /target.txt)

# Create app directory
WORKDIR /app

# Copy manifests first for better caching
COPY Cargo.toml Cargo.lock ./

# Create dummy source files to cache dependencies
RUN mkdir -p src benches && \
    echo "fn main() {}" > src/main.rs && \
    echo "pub fn lib() {}" > src/lib.rs && \
    echo "fn main() {}" > benches/mining_performance.rs && \
    cargo build --release --target $(cat /target.txt) && \
    rm -rf src benches

# Copy actual source code
COPY src ./src

# Build with maximum optimizations
# - target-cpu=native optimizes for the build CPU (removed for cross-platform compatibility)
# - opt-level=3 is maximum optimization
# - lto=fat enables full link-time optimization
# - codegen-units=1 ensures everything is in one compilation unit for better optimization
# - strip=symbols removes debug symbols
# - panic=abort makes panics abort instead of unwind (smaller binary)
ENV RUSTFLAGS="-C opt-level=3 -C lto=fat -C codegen-units=1 -C strip=symbols -C panic=abort"

# Also update Cargo.toml profile for additional optimizations
RUN echo '\n\
[profile.release]\n\
opt-level = 3\n\
lto = "fat"\n\
codegen-units = 1\n\
panic = "abort"\n\
strip = true\n\
' >> Cargo.toml

RUN cargo build --release --target $(cat /target.txt) && \
    cp target/$(cat /target.txt)/release/chainweb-mining-client /chainweb-mining-client

# Runtime stage - using distroless for security and compatibility
FROM gcr.io/distroless/static:nonroot

# Copy the binary
COPY --from=builder /chainweb-mining-client /chainweb-mining-client

# Use nonroot user
USER nonroot:nonroot

# Set entrypoint
ENTRYPOINT ["/chainweb-mining-client"]